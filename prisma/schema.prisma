// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Token {
  id                Int       @id @default(autoincrement())
  address           String    
  symbol            String    
  name              String
  exchange          String?
  factory           String?
  additional_info   Json?
  image             String?
  rank_tokens       rank_tokens[]
  transactions      Transaction[]
  @@map("tokens")
}

model Block {
  id            Int             @id @default(autoincrement())
  blockNumber   Int             @unique
  blockHash     String
  timestamp     DateTime
  chain         String
  transactions  Transaction[]
  @@map("blocks")
}

model Transaction{
  id              Int      @id @default(autoincrement())
  block_id        Int
  token_id        Int
  transactionHash String
  fromAddress     String
  toAddress       String
  amount          Float
  token           Token    @relation(fields: [token_id], references: [id])
  block           Block    @relation(fields: [block_id], references: [blockNumber])

  @@map("transactions")
}


model rank_tokens {
  id                Int         @id @default(autoincrement())
  token_id          Int
  chain             String
  exchange          String
  pair              String
  rank              Int
  side              Side        @default(gainer)
  timestamp         DateTime?
  price             Float?
  price24h          Float?
  variation24h      Float?
  creationBlock     Float?
  image             String?
  token             Token       @relation(fields: [token_id], references: [id])

  @@map("rank_tokens")
}

model WalletAnalyzer{
  id                Int                   @id @default(autoincrement())
  user_id           String
  wallet_address    String
  status            WalletAnalyzerStatus  @default(ACTIVE)
  time_period       Int
  transactions      Json?
  historical_prices Json?
  result            Json? 
  created_at        DateTime              @default(now())
  updated_at        DateTime?             @updatedAt
  @@map("wallet_analyzer")
}

model PresaleTransactions{
  id                Int                   @id @default(autoincrement())
  user_id           String
  wallet_address    String
  amount            Float
  price_usdt        Float
  price_ton         Float
  created_at        DateTime              @default(now())
  updated_at        DateTime?             @updatedAt
  @@map("presale_transactions")

}



model Settings {
  id            Int             @id @default(autoincrement())
  slug          String          @unique
  value         String?
  @@map("settings")

}


enum WalletAnalyzerStatus {
  ACTIVE
  COMPLETE
  ERROR
}

enum Side {
  gainer
  loser
}


